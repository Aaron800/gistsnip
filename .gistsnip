{
    "Description": "",
    "Snippets": {
        "main#main.go": {
            "GistID": "333e8e0633d76405fcb68c19149d55db",
            "GistURL": "https://gist.github.com/333e8e0633d76405fcb68c19149d55db",
            "Line": 22,
            "File": "main.go",
            "Path": "main#main.go",
            "Name": "main",
            "Content": "func main() {\n\t//gistsnip:start:parse\n\tflag.Parse()\n\t//gistsnip:end:parse\n\n\tpaths := flag.Args()\n\tif len(paths) == 0 {\n\t\tpaths = []string{\".\"}\n\t}\n\n\toldGist, err := LoadGist(*gistsnip)\n\tif os.IsNotExist(err) {\n\t\toldGist = NewGist()\n\t\terr = nil\n\t}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tnewGist, err := GistFromGlobs(paths)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tnewGist.Description = *description\n\tif newGist.Description == \"\" {\n\t\tnewGist.Description = oldGist.Description\n\t}\n\n\ttokenSource := oauth2.StaticTokenSource(\u0026oauth2.Token{AccessToken: *githubToken})\n\thttpClient := oauth2.NewClient(context.Background(), tokenSource)\n\n\tclient := github.NewClient(httpClient)\n\n\tcurrentUser, _, err := client.Users.Get(\"\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tsnippets := []*Snippet{}\n\n\tfor gistName, snippet := range newGist.Snippets {\n\t\tsnippets = append(snippets, snippet)\n\n\t\toldSnippet, exists := oldGist.Snippets[gistName]\n\t\tif exists \u0026\u0026 oldSnippet.EqualContent(snippet) \u0026\u0026 oldSnippet.GistID != \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tdescription := newGist.Description\n\n\t\tif link, err := GithubLinkToFile(snippet.File, snippet.Line); err == nil {\n\t\t\tif description != \"\" {\n\t\t\t\tdescription += \"\\n\"\n\t\t\t}\n\t\t\tdescription += link\n\t\t}\n\n\t\tgist := \u0026github.Gist{}\n\t\tgist.Owner = currentUser\n\t\tgist.Description = github.String(description)\n\t\tgist.Public = github.Bool(false)\n\t\tgist.Files = map[github.GistFilename]github.GistFile{}\n\n\t\tgist.Files[github.GistFilename(snippet.Path)] = github.GistFile{\n\t\t\tContent: github.String(snippet.Content),\n\t\t}\n\n\t\tif oldSnippet, ok := oldGist.Snippets[gistName]; ok {\n\t\t\tif oldSnippet.GistID != \"\" {\n\t\t\t\t_, _, err := client.Gists.Edit(oldSnippet.GistID, gist)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tresult, _, err := client.Gists.Create(gist)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tsnippet.GistID = *result.ID\n\t\tsnippet.GistURL = *result.HTMLURL\n\t}\n\n\terr = SaveGist(*gistsnip, newGist)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tsort.Slice(snippets, func(i, k int) bool {\n\t\treturn snippets[i].Path \u003c snippets[k].Path\n\t})\n\n\tfor _, snippet := range snippets {\n\t\tfmt.Println(snippet.Path, snippet.GistURL)\n\t}\n}"
        },
        "main#parse.go": {
            "GistID": "09f5d812a1a805edc2e0045d689cf0c4",
            "GistURL": "https://gist.github.com/09f5d812a1a805edc2e0045d689cf0c4",
            "Line": 24,
            "File": "main.go",
            "Path": "main#parse.go",
            "Name": "parse",
            "Content": "\tflag.Parse()"
        }
    }
}
